[{"cursor":"Y3Vyc29yOnYyOpHOEsp1eg==","node":{"number":1,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"其实可以`IntStream.range()`。","author":{"login":"blindpirate"},"commit":{"oid":"28b74fd0c62b179b9e11937a3c453ba2f857a4be"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":35,"originalLine":35,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEswNmA==","node":{"number":2,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"嗯。。。其实这里和原先的方法返回的不一样，这里是返回了十个数字，原先的方法返回了十个字符串。不过练习目的已经达到，这些都是无关紧要的细节。","author":{"login":"blindpirate"},"commit":{"oid":"a0cccc65e138cf1f56de5555bba3e4ba6cac7c60"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":32,"originalLine":32,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEtQiuw==","node":{"number":3,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEt4mHQ==","node":{"number":4,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"没必要非写成流，这里可以直接把原先的for循环抄过来啊。。。","author":{"login":"blindpirate"},"commit":{"oid":"c55b79767f2bc09a4ba73cba1ffc2b047a40cd52"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"其实这里用for循环更清楚。请注意，代码是为你服务的，而不是你为代码服务，所以，并不是“为了用流而用流“，这里写成\r\n\r\n```\r\nList<Object> result = new ArrayList<>();\r\n        for (int i = 0; i < 10; i++) {\r\n            result.add(supplier.get());\r\n        }\r\n        return result;\r\n```\r\n\r\n完全可以啊。","author":{"login":"blindpirate"},"commit":{"oid":"c55b79767f2bc09a4ba73cba1ffc2b047a40cd52"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":32,"originalLine":32,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEvabZA==","node":{"number":5,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"@blindpirate 这个地方不知道怎么像其他两个方法一样get10次，每次拿一个自增的数。所以就干脆get了整个数组，感觉好蠢，老师可以提一些优化的措施嘛。","author":{"login":"Scott-YuYan"},"commit":{"oid":"c10159f37f47c22fefcb9527adcbd03030dae4d4"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":29,"originalLine":29,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"```\r\nAtomicInteger i = new AtomicInteger(0);\r\nreturn create(()-> \"\" + i.getAndIncrement()); \r\n```\r\n\r\n思考一下为什么可以这么做，为什么需要用一个`AtomicInteger`？","author":{"login":"blindpirate"},"commit":{"oid":"c10159f37f47c22fefcb9527adcbd03030dae4d4"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"第一个问题“为什么可以这样做”，应该是由于方法是由一个虚空到创建一个String，符合supplier的约定。另一个问题，“为什么使用原子类型”，看了一下源码\r\n```\r\n /**\r\n     * Atomically increments by one the current value.\r\n     *\r\n     * @return the previous value\r\n     */\r\n    public final int getAndIncrement() {\r\n        return unsafe.getAndAddInt(this, valueOffset, 1);\r\n    }\r\n```\r\n这个自增是不安全的，所以需要原子类型的参数保证不出现多线程那种的问题吧","author":{"login":"Scott-YuYan"},"commit":{"oid":"c10159f37f47c22fefcb9527adcbd03030dae4d4"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"不是。。。。。。。\r\n\r\n```\r\nint i = 0;\r\nreturn create(()-> \"\" + i++); \r\n```\r\n\r\n你试过直接用一个int么？这样会出现编译错误。你要首先回答为什么使用`int`会出错，才能回答为什么需要`AtomicInteger`。这里的AtomicInteger只是一个容器，跟线程安全没关系。","author":{"login":"blindpirate"},"commit":{"oid":"c10159f37f47c22fefcb9527adcbd03030dae4d4"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":40,"originalLine":40,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEvcD4g==","node":{"number":6,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEvjE5g==","node":{"number":7,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOEyOfQQ==","node":{"number":8,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE1qGxw==","node":{"number":9,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE2LIzw==","node":{"number":10,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE296Dg==","node":{"number":11,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE3ltMQ==","node":{"number":12,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE4YsCw==","node":{"number":13,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE6sLIg==","node":{"number":14,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE61Dwg==","node":{"number":15,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE677vQ==","node":{"number":16,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE7pFTQ==","node":{"number":17,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE8WTRA==","node":{"number":18,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE8oC5A==","node":{"number":19,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE-qzMw==","node":{"number":20,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"@blindpirate 这里不知道怎么写, 就没有改动","author":{"login":"phlvance"},"commit":{"oid":"b711feaebf8a85c6fcc59ce7577fbcfd3bf173fc"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"可以参考别的同学的答案。需要一个额外的变量存储自增的数字","author":{"login":"hcsp-bot"},"commit":{"oid":"b711feaebf8a85c6fcc59ce7577fbcfd3bf173fc"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":33,"originalLine":33,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOE-6sfA==","node":{"number":21,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"你这样重构的跟原先的代码不一样了。。。","author":{"login":"hcsp-bot"},"commit":{"oid":"8b4825ef180152094b666f24a86485aa17839eeb"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":31,"originalLine":31,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFDjxJQ==","node":{"number":22,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFFA64w==","node":{"number":23,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFGCLZA==","node":{"number":24,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFGVK7w==","node":{"number":25,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFHSXKA==","node":{"number":26,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFIic3A==","node":{"number":27,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFI7XWQ==","node":{"number":28,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFMRKwg==","node":{"number":29,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFOJuxQ==","node":{"number":30,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"你也没重构printWithComma/printWithDash/printWithColon三个方法啊。。。","author":{"login":"hcsp-bot"},"commit":{"oid":"779fa4de0c6c68f794ae508a48fc5416a0faf250"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"是，我以为补完那个方法就可以了。。。感觉可以提一个`pr`了","author":{"login":"wangjie-fourth"},"commit":{"oid":"779fa4de0c6c68f794ae508a48fc5416a0faf250"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":23,"originalLine":23,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFPLaCg==","node":{"number":31,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFQI7uQ==","node":{"number":32,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"这里直接把\";\"传进去不就行了，干嘛费劲定义一个WITH_COMMA，然后上面还用if/else判断？","author":{"login":"hcsp-bot"},"commit":{"oid":"331dab4f966dd141509fdb0bbf5ea1f91a9c0ad1"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":56,"originalLine":56,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFU3YDg==","node":{"number":33,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFV1q6Q==","node":{"number":34,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFV3Uvw==","node":{"number":35,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFV7iiw==","node":{"number":36,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"哈哈，可以直接用内置的`AtomicInteger`。","author":{"login":"hcsp-bot"},"commit":{"oid":"8151fc5a57cea93377db0f62dbfc40b794a8aae0"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"没涉及到多线程就没想起来。。。","author":{"login":"thoughtliuw"},"commit":{"oid":"8151fc5a57cea93377db0f62dbfc40b794a8aae0"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":34,"originalLine":34,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFaNy2Q==","node":{"number":37,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFcqlkA==","node":{"number":38,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFc4qlQ==","node":{"number":39,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"`AtomicInteger`可以达到同样的效果，不用额外声明一个类。","author":{"login":"hcsp-bot"},"commit":{"oid":"84fe813e84f9a70615bf5a54abb635cfe7854e0f"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":34,"originalLine":34,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFdRafw==","node":{"number":40,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"方法名应该以小写字母开头。","author":{"login":"hcsp-bot"},"commit":{"oid":"081c1dd1fb8c567cbd8ab8d9cf6aff7ef149c56f"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":14,"originalLine":14,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFeMBPQ==","node":{"number":41,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFfR8qg==","node":{"number":42,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFfbfNg==","node":{"number":43,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFf4XWA==","node":{"number":44,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"👍 ","author":{"login":"hcsp-bot"},"commit":{"oid":"00e537464a4d60844f6d607dc8ac736ad857ae30"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":36,"originalLine":36,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFglVzA==","node":{"number":45,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFjdR8Q==","node":{"number":46,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFjgWFg==","node":{"number":47,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFj7unw==","node":{"number":48,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFleY6A==","node":{"number":49,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFlfBFw==","node":{"number":50,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFlfZww==","node":{"number":51,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFl5SAg==","node":{"number":52,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFmSfvA==","node":{"number":53,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFoA-6g==","node":{"number":54,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFon4Ng==","node":{"number":55,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFo0vwg==","node":{"number":56,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFqvWkQ==","node":{"number":57,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFrpBOQ==","node":{"number":58,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFvXUCg==","node":{"number":59,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"你可真是个小机灵鬼","author":{"login":"hcsp-bot"},"commit":{"oid":"f18815391cc69e4148ef0b22b47af95c912b3488"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":37,"originalLine":37,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFwjpGw==","node":{"number":60,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFxQM7Q==","node":{"number":61,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"为什么要有这个泛型？","author":{"login":"hcsp-bot"},"commit":{"oid":"80e0826c8c5928a589a7fe05a8b5f47fb6274d9b"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}},{"body":"我去看了下代码，也想不起来了，可能是之前写方法某一步的时候要求过整体的泛型，后面改掉的时候没有改正这个地方。","author":{"login":"zml59"},"commit":{"oid":"80e0826c8c5928a589a7fe05a8b5f47fb6274d9b"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":8,"originalLine":8,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFxaVxw==","node":{"number":62,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF1trqQ==","node":{"number":63,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF2ELoA==","node":{"number":64,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF2xLfw==","node":{"number":65,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF4HqDg==","node":{"number":66,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF46N8w==","node":{"number":67,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF7IE2A==","node":{"number":68,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF7OY6Q==","node":{"number":69,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF7iczw==","node":{"number":70,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF9PSXQ==","node":{"number":71,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGAQaww==","node":{"number":72,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGCty8g==","node":{"number":73,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"这里改变了程序的功能。。。","author":{"login":"hcsp-bot"},"commit":{"oid":"08ec991dea1dd91e8a81523c45d3e3a1cd0c832c"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/functional/RefactorToConsumer.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToFunction.java"},{"path":"src/main/java/com/github/hcsp/functional/RefactorToSupplier.java"}]}}}]},"line":51,"originalLine":51,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGC3Mqw==","node":{"number":74,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGC30xg==","node":{"number":75,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGC4WVQ==","node":{"number":76,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGGV3cQ==","node":{"number":77,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGIBfYQ==","node":{"number":78,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGIJq-g==","node":{"number":79,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGJbhvw==","node":{"number":80,"reviewThreads":{"nodes":[]},"headRepository":null}}]