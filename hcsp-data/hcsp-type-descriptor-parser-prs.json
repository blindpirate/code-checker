[{"cursor":"Y3Vyc29yOnYyOpHOFsLQ8Q==","node":{"number":1,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsLatw==","node":{"number":2,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsNeRw==","node":{"number":3,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsOK6A==","node":{"number":4,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsSmow==","node":{"number":5,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsUp-A==","node":{"number":6,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"如果`descriptor`是`I`的话，应该返回`PrimitiveTypeDescriptor`啊……","author":{"login":"blindpirate"},"commit":{"oid":"2d65d0f7b3d93f8effe01a1a59c0cef8df5ca285"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/DescriptorUtils.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}},{"body":"Ah-hah， I missed.","author":{"login":"keukauh"},"commit":{"oid":"2d65d0f7b3d93f8effe01a1a59c0cef8df5ca285"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/DescriptorUtils.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":25,"originalLine":25,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsVNNw==","node":{"number":7,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsVP0Q==","node":{"number":8,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsVwnA==","node":{"number":9,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsWfAA==","node":{"number":10,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"这个if/else似乎并不需要吧……剥掉`[]`之后直接丢给`TypeDescriptor.parse`就行了。\r\n\r\n另外这个代码没有格式化。","author":{"login":"blindpirate"},"commit":{"oid":"cdd92e8916f985aba9f2b96ae7ef41f366ad2b56"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":36,"originalLine":36,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"正则表达式的编译十分昂贵，所以最好把它声明成static的只编译一次，下面同理。\r\n\r\n另外你这个正则写的有问题吧……逗号是不需要的，直接`[BCDFIJSZV]`就行了。","author":{"login":"blindpirate"},"commit":{"oid":"cdd92e8916f985aba9f2b96ae7ef41f366ad2b56"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}},{"body":"所以你这里干嘛不直接调用`PrimitiveTypeDescriptor.isPrimitive()`方法？","author":{"login":"blindpirate"},"commit":{"oid":"cdd92e8916f985aba9f2b96ae7ef41f366ad2b56"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":50,"originalLine":50,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"相同的正则表达式出现了3次？","author":{"login":"blindpirate"},"commit":{"oid":"cdd92e8916f985aba9f2b96ae7ef41f366ad2b56"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":35,"originalLine":35,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"```\r\nif(XXX) {\r\n    return true\r\n} else {\r\n    return false\r\n}\r\n```\r\n\r\n可以简化成\r\n\r\n```\r\nreturn XXX;\r\n```\r\n\r\n所以你这里可以简化为\r\n\r\n```\r\nreturn descriptor.length() == 1 && Pattern.matches(regex, descriptor);\r\n```\r\n\r\n请感受一下？","author":{"login":"blindpirate"},"commit":{"oid":"cdd92e8916f985aba9f2b96ae7ef41f366ad2b56"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":37,"originalLine":37,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsWvbQ==","node":{"number":11,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsXIpw==","node":{"number":12,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsXTnA==","node":{"number":13,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsYh2w==","node":{"number":14,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"@hcsp-bot 老师我在这里多加了一个测试样例","author":{"login":"dandanloveJM"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":0,"originalLine":53,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"```suggestion\r\n}\r\n\r\n```","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":0,"originalLine":46,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"这个replace似乎是多余的。","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":25,"originalLine":25,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"`charStream().filter(c -> c=='[').count`","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":26,"originalLine":26,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"这个if是多余的，无论是不是引用类型，都可以使用`TypeDescriptor.parse`，实现代码的复用，否则，这里的代码实际上是和`ReferenceDescriptor`里面是重复的。","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":33,"originalLine":33,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"IDE会警告你不能在循环里进行字符串加法的。","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":41,"originalLine":41,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"Java的命名约定里没有这种下划线……虽然问题不大。","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":22,"originalLine":22,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"正则表达式每次都编译的代价十分昂贵，应该预先编译好放到static字段里。","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":57,"originalLine":57,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"TBH，这个方法写的太复杂根本就没心思看……只能通过测试来保证正确性，如果没有测试的话，基本上就没办法维护了（因为每次改动这里的代码你都不知道会不会搞坏原先好使的代码…）","author":{"login":"blindpirate"},"commit":{"oid":"1b35a3de113801b8a5aac3f0b4c813eb24101575"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/TypeDescriptor.java"}]}}}]},"line":110,"originalLine":110,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFsbH0w==","node":{"number":15,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFse29w==","node":{"number":16,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFs-Qog==","node":{"number":17,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOFyqtVQ==","node":{"number":18,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOF8boNg==","node":{"number":19,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGC6L4A==","node":{"number":20,"reviewThreads":{"nodes":[{"comments":{"nodes":[{"body":"Pattern的编译是一个很昂贵的操作，应该尽可能放到全局变量中，编译一次，长久使用，而不是放在方法里，每次都重新编译","author":{"login":"hcsp-bot"},"commit":{"oid":"b7c09ba555ae8e67e5e6d4c6ca0ffbf2a23ab873"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"}]}}}]},"line":35,"originalLine":35,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"`Collectors.joining()`方法更方便。","author":{"login":"hcsp-bot"},"commit":{"oid":"b7c09ba555ae8e67e5e6d4c6ca0ffbf2a23ab873"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"}]}}}]},"line":30,"originalLine":30,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"Pattern的编译是一个很昂贵的操作，应该尽可能放到全局变量中，编译一次，长久使用，而不是放在方法里，每次都重新编译","author":{"login":"hcsp-bot"},"commit":{"oid":"b7c09ba555ae8e67e5e6d4c6ca0ffbf2a23ab873"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"}]}}}]},"line":36,"originalLine":36,"originalStartLine":null,"startLine":null,"startDiffSide":null},{"comments":{"nodes":[{"body":"这里为啥不会用Stream了呢…","author":{"login":"hcsp-bot"},"commit":{"oid":"b7c09ba555ae8e67e5e6d4c6ca0ffbf2a23ab873"},"pullRequest":{"files":{"nodes":[{"path":"src/main/java/com/github/hcsp/descriptorparser/ArrayDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/MethodDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/PrimitiveTypeDescriptor.java"},{"path":"src/main/java/com/github/hcsp/descriptorparser/ReferenceDescriptor.java"}]}}}]},"line":23,"originalLine":23,"originalStartLine":null,"startLine":null,"startDiffSide":null}]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGEmrEA==","node":{"number":21,"reviewThreads":{"nodes":[]},"headRepository":null}},{"cursor":"Y3Vyc29yOnYyOpHOGEnBRQ==","node":{"number":22,"reviewThreads":{"nodes":[]},"headRepository":null}}]